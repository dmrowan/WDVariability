#!/usr/bin/env python
from __future__ import print_function, division, absolute_import
import os
import matplotlib.pyplot as plt
import numpy as np
import argparse
import pandas as pd
import matplotlib.gridspec as gs
from gPhoton import gphoton_utils
from WDranker_2 import badflag_bool
import subprocess
from matplotlib.patheffects import withStroke
import _pickle as pickle
from scipy import optimize

desc="""
WDtransitfit: Use a simple piecewise function to fit transit parameters
"""

def piecewise_linear_half(x, x0, x1, m1, m2, m3, y0):
    return np.piecewise(x, [x<x0, ((x>x0)&(x<x1))], 
                        [lambda x: m1*(x-x0) + y0, 
                         lambda x: m2*(x-x0) + y0,
                         lambda x: m3*(x-x1) + m2*(x1-x0) +y0])

def piecewise_linear_full(x, x0,x1,x2, x3, m1,m2, m3, y0):
    return np.piecewise(x, [x<x0, ((x>x0) & (x<x1)), 
                            ((x>x1) & (x<x2)), ((x>x2) & (x<x3)) ], 
                        [lambda x: m1*x +y0-m1*x0, 
                        lambda x: m2*x + y0-m2*x0,
                        lambda x: m3*(x-x1) + m2*(x1-x0) + y0,
                        lambda x: (-m2)*(x-x2) + m3*(x2-x1) + m2*(x1-x0)+y0,
                        lambda x: m1*(x-x3) + (-m2)*(x3-x2) + 
                                  m3*(x2-x1) + m2*(x1-x0)+y0])

def main(fname, t1=None, t2=None, t3=None, t4=None):
    with open(fname, 'rb') as handle:
        pdic = pickle.load(handle)
    
    source = fname[:-7]
    #Decide which fit function to use based on number of guesses
    t1guess=t2guess=t3guess=t4guess=None
    if t1 is not None:
        t1guess = t1
    if t2 is not None:
        t2guess = t2
    if t3 is not None:
        t3guess = t3
    if t4 is not None:
        t4guess = t4


    jd = pdic['jd']
    jd = [ val * 1440 for val in jd]
    cps = pdic['cps']
    cps_err = pdic['err']
    fig, ax = plt.subplots(1,1, figsize=(8,4))
    ax.errorbar(jd, cps, yerr=cps_err, ls='', 
                ecolor='gray', color='red', marker='.')
    xd = np.arange(0, max(jd), .001)

    if None not in [t1guess, t2guess, t3guess, t4guess]:
        print("Using full fit function")
        p, e = optimize.curve_fit(
                piecewise_linear_full, 
                jd, cps, sigma=cps_err, 
                p0=[t1guess,t2guess, t3guess,t4guess, 0, -.5, 0, 1], 
                bounds=([t1guess-2, t2guess-2, t3guess-2, t4guess-2,
                        -.5, -2, -.1, 0.8],
                        [t1guess+2, t2guess+2, t3guess+2, t4guess+2,
                        .5, -.1, 0.1, 1.2]))
        ax.plot(xd, piecewise_linear_full(xd, *p))

    elif ((t1guess is not None) and (t2guess is not None) and
            (t3guess is None) and (t4guess is None)):
        print("Using ingress fit function")
        p, e = optimize.curve_fit(
                piecewise_linear_half, 
                jd, cps, sigma=cps_err,
                p0=[t1guess, t2guess, 0, .5, 0, 1],
                bounds=([t1guess-2, t2guess-2, -.25, -1, -.5, .5],
                        [t1guess+2, t2guess+2, 0.25, 1, 0.5, 1.5]))
        ax.plot(xd, piecewise_linear_half(xd, *p))

    
    elif ((t1guess is None) and (t2guess is None) and 
            (t3guess is not None) and (t4guess is not None)):
        print("Using egress fit function")
        p, e = optimize.curve_fit(
                piecewise_linear_half, 
                jd, cps, sigma=cps_err,
                p0=[t3guess, t4guess, 0, .5, 0, 0],
                bounds=([t3guess-2, t4guess-2, -.5, -1, -.5, -.5],
                        [t3guess+2, t4guess+2, 0.5, 1, 0.5, 0.5]))
        ax.plot(xd, piecewise_linear_half(xd, *p))


    print(p)
    ax.minorticks_on()
    ax.yaxis.set_ticks_position('both')
    ax.xaxis.set_ticks_position('both')
    ax.tick_params(direction='in', which='both', labelsize=15)
    ax.tick_params('both', length=8, width=1.8, which='major')
    ax.tick_params('both', length=4, width=1, which='minor')

    for axis in ['top', 'bottom', 'left', 'right']:
        ax.spines[axis].set_linewidth(1.5)
    

    fig.savefig(source+'_fit.pdf')

if __name__ == '__main__':
     parser = argparse.ArgumentParser(description=desc)
     parser.add_argument("--fname", help="input pickle file",
                         required=True, type=str)
     parser.add_argument("--t1", help="Eclipse ingress start guess", 
                         default=None, type=float)
     parser.add_argument("--t2", help="Eclipse ingress end guess", 
                         default=None, type=float)
     parser.add_argument("--t3", help="Eclipse egress start guess", 
                         default=None, type=float)
     parser.add_argument("--t4", help="Eclipse egress end guess", 
                         default=None, type=float)
     args= parser.parse_args()

     main(fname = args.fname, t1=args.t1, t2=args.t2, t3=args.t3, t4=args.t4)
