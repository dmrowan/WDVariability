#!/usr/bin/env python
from __future__ import print_function, division, absolute_import
import os
import matplotlib.pyplot as plt
import numpy as np
import argparse
import pandas as pd
import matplotlib.gridspec as gs
from gPhoton import gphoton_utils
from WDranker_2 import badflag_bool
import subprocess
from matplotlib.patheffects import withStroke
import _pickle as pickle
from scipy import optimize

desc="""
WDtransitfit: Use a simple piecewise function to fit transit parameters
"""

#def piecewise_linear(x, x0,y0,m1,m2):
#    return np.piecewise(x, [x<x0], 
#                        [lambda x: m1*x +y0-m1*x0, 
#                        lambda x: m2*x + y0-m2*x0])

def piecewise_linear(x, x0,y0,m1,m2, x1, m3, x2):
    return np.piecewise(x, [x<x0, ((x>x0) & (x<x1)), ((x>x1) & (x<x2))], 
                        [lambda x: m1*x +y0-m1*x0, 
                        lambda x: m2*x + y0-m2*x0,
                        lambda x: m3*(x-x1) + m2*(x1-x0) + y0,
                        lambda x: (-m2)*(x-x2) + m3*(x2-x1) + m2*(x1-x0)+y0])

def main():
    with open('Gaia-DR2-1009242620785138688.pickle', 'rb') as handle:
        pdic = pickle.load(handle)

    jd = pdic['jd']
    jd = [ val * 1440 for val in jd]
    cps = pdic['cps']
    cps_err = pdic['err']
    fig, ax = plt.subplots(1,1, figsize=(8,4))
    ax.errorbar(jd, cps, yerr=cps_err, ls='', 
                ecolor='gray', color='red', marker='.')

    ax.axvline(jd[102])

    #p, e = optimize.curve_fit(piecewise_linear, jd[:81], cps[:81])
    p, e = optimize.curve_fit(piecewise_linear, jd[:103], cps[:103], 
            p0=[17.658, 1.0853, 3.833e-3, -4.773e-1, 20, 0, 24.5], 
            bounds=([16, 0.8, 3.5e-3, -5.0e-1, 18, -.1, 23],
                    [19, 1.2, 4.0e-3, -4.4e-1, 21, 0.1, 26]))
    print(p)
    xd = np.arange(0, jd[102], .001)
    ax.plot(xd, piecewise_linear(xd, *p))

    fig.savefig('eclipsefittest.pdf')

if __name__ == '__main__':
     parser = argparse.ArgumentParser(description=desc)
     args= parser.parse_args()

     main()
