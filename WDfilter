#!/usr/bin/env python
from __future__ import print_function, division
import os
import argparse
import pandas as pd
import subprocess
#Dom Rowan REU 2018

desc="""
Go through AllData.csv and remove sources with x in comments. This will remove the output files, galexcsv, pdf, and add to list of filtered sources in WhiteDwarfs/filteredsources.txt
"""

#Add sources to text file of bad sources
def main():
    assert(os.path.isfile("Output/AllData.csv"))
    #Create file if it doesn't already exist
    if not os.path.isfile("../filtersources.txt"):
        with open('../filtersources.txt', 'w') as f:
            f.close()
    #Read in AllData.csv
    df_rank = pd.read_csv("Output/AllData.csv")
    #Intialize Lists
    idx_drop = []
    name_drop = []
    band_drop = []
    galexcsv_drop = []
    outputcsv_drop = []
    pdf_drop = []
    #Iterate through DF
    for i in range(len(df_rank['Comment'])):
        if df_rank['Comment'][i] == 'x':
            idx_drop.append(i)
            name = df_rank['SourceName'][i]
            band = df_rank['Band'][i]
            name_drop.append(name)
            band_drop.append(band)
            galexcsv_drop.append(name+"-"+band+".csv")
            outputcsv_drop.append("Output/"+name+"-"+band+"-output.csv")
            pdf_drop.append("PDFs/"+name+"_"+band+"_combined.pdf")

    confirm = input("Filtering all rows with 'x' in comment. Hit y to confirm --- ")
    if confirm == 'y':
        for gname, outputname, pdfname in zip(galexcsv_drop, outputcsv_drop, pdf_drop):
            subprocess.run(['rm', gname])
            subprocess.run(['rm', outputname])
            subprocess.run(['rm', pdfname])
            with open('../filtersources.txt', 'r') as f:
                currentlines = f.readlines()
            with open('../filtersources.txt', 'a') as f:
                if not (gname in currentlines):
                    f.write(gname)
    else:
        return

#Used to filter a new sample by known 'bad' sources
def filterdir():
    assert(os.path.isfile("../filtersources.txt"))
    with open("../filtersources.txt", 'r') as f:
        filteredfiles = f.readlines()

    for filename in filteredfiles:
        subprocess.run(['rm', filename])



if __name__ == '__main__':

    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument("--filterdir", help="Use current filtered information to reduce sample in current directory", default=False, action='store_true')
    args= parser.parse_args()

    if args.filterdir:
        filterdir()
    else:
        main()
