#!/usr/bin/env python
from __future__ import print_function, division
import os, sys
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import argparse
from astropy import log
from os import path
from glob import glob
from subprocess import check_call
import shutil
from astropy.table import Table
import sys
from datetime import datetime
from dateutil import parser as pr
import pylab
import itertools
from datetime import timedelta
from matplotlib.backends.backend_pdf import PdfPages
import astropy
from radec_conversion import *
import pandas as pd
from astropy.stats import LombScargle
import heapq
import matplotlib.image as mpimg
from scipy.optimize import curve_fit
import time
import subprocess
#Dom Rowan REU 2018

desc = """
This will call the WDranker for all CSVs in a directory. This is simply a python version of a simple for loop you could use. This doesn't show the highest ranking. See WDcompare for this. 
"""

parser = argparse.ArgumentParser(description=desc)
#Have to include the arguments from WDranker
parser.add_argument("--fap", help = "False alarm probability theshold for periodogram", default=.05, type=float)
parser.add_argument("--prange", help = "Frequency range for identifying regions in periodogram due to expt and detrad", default=.0005, type=float)
parser.add_argument("--w_pgram", help = "Weight for periodogram", default = 1, type=float)
parser.add_argument("--w_expt", help= "Weight for exposure time", default = .25, type=float)
parser.add_argument("--w_ac", help="Weight for autocorrelation", default = 0, type=float)
parser.add_argument("--w_mag", help= "Weight for magnitude", default=.5, type=float)
parser.add_argument("--comment", help="Add comments/interactive mode", default=False, action='store_true')
parser.add_argument("--noreplace", help="Continue for new sources rather than overwriting", default=False, action='store_true')

args= parser.parse_args()

for filename in os.listdir(os.getcwd()):
    if filename.endswith('.csv'):
        if args.noreplace and os.path.isfile("Output/"+filename[:-4]+"-output.csv"):
            print("Output for "+filename[:-4]+" already exists, skipping")
            continue
        else:
            if not args.comment:
                subprocess.run(['WDranker', '--csvname', filename, '--fap', str(args.fap), '--prange', str(args.prange), '--w_pgram', str(args.w_pgram), '--w_expt', str(args.w_expt), '--w_ac', str(args.w_ac), '--w_mag', str(args.w_mag)])
            else:
                subprocess.run(['WDranker', '--csvname', filename, '--fap', str(args.fap), '--prange', str(args.prange), '--w_pgram', str(args.w_pgram), '--w_expt', str(args.w_expt), '--w_ac', str(args.w_ac), '--w_mag', str(args.w_mag), '--comment'])
