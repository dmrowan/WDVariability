#!/usr/bin/env python
from __future__ import print_function, division
import os, sys
import matplotlib.pyplot as plt
import numpy as np
import argparse
from astropy import log
import astropy
import pandas as pd
import subprocess
import astroquery
from astropy import units as u
from astropy.coordinates import SkyCoord
import _pickle as pickle
import ipdb
#Dom Rowan REU 2018

desc = """
This will make a csv containing info from Simbad on sources in current directory. Output filename: AllCatalog_Simbad.csv
"""
parser = argparse.ArgumentParser(description=desc)
parser.add_argument("--sep", help="Seperation threshold for crosschecking, arcseconds", type=float, default=5)
args= parser.parse_args()

#Lists to build
gaia_designation = []
gaia_ra = []
gaia_dec = []
gaia_parallax = []
gaia_parallax_error = []
gaia_g_mean_flux = []
gaia_g_mean_flux_error = []
gaia_g_mean_mag = []
gaia_bp_mean_flux = []
gaia_bp_mean_flux_error = []
gaia_bp_mean_mag = []
gaia_rp_mean_flux = []
gaia_rp_mean_flux_error = []
gaia_rp_mean_mag = []
gaia_nuv_time = []
gaia_fuv_time = []


sdss_designation = []
sdss_u = []
sdss_su = []
sdss_g = []
sdss_sg = []
sdss_r = []
sdss_sr = []
sdss_i = []
sdss_si = []
sdss_z = []
sdss_sz = []
sdss_dtype = []
sdss_nuv_time = []
sdss_fuv_time = []


with open('/home/dmrowan/WhiteDwarfs/checked.pickle', 'rb') as p:
    picklelist = pickle.load(p)

picklelist_names = [ pic[0] for pic in picklelist ]

SDSSpath = "/home/dmrowan/WhiteDwarfs/Catalogs/SDSSCatalog.csv"
df_SDSS = pd.read_csv("SDSSCatalog.csv")
df_SDSS['ra'] = df_SDSS['SDSS-J'].str[0:2]+":"+ df_SDSS['SDSS-J'].str[2:4]+":"+ df_SDSS['SDSS-J'].str[4:9]
df_SDSS['dec'] = df_SDSS['SDSS-J'].str[9:12] + ":" + df_SDSS['SDSS-J'].str[12:14] + ":" + df_SDSS['SDSS-J'].str[14:]

df_GAIA = pd.read_csv("GaiaWDcatalog.csv")
gaia_catalog = SkyCoord(ra=list(df_GAIA['ra'])*u.degree, dec=list(df_GAIA['dec'])*u.degree)
for i in range(len(df_SDSS['ra'])):
    stringcoord = df_SDSS['ra'][i] + " " + df_SDSS['dec'][i]
    c = SkyCoord(stringcoord, unit=(u.hour, u.deg))
    idx, d2d, d3d = c.match_to_catalog_sky(gaia_catalog)
    if d2d < args.sep*u.arcsec:
        print("SDSS source " + stringcoord + " found in GAIA catalog")
        #Grab information from GAIA catalog at index idx
        idx = int(idx)
        gaia_designation.append(df_GAIA['designation'][idx])
        gaia_ra.append(df_GAIA['ra'][idx])
        gaia_dec.append(df_GAIA['dec'][idx])
        gaia_parallax.append(df_GAIA['parallax'][idx] * 10e3)
        gaia_parallax_error.append(df_GAIA['parallax_error'][idx] * 10e3)
        gaia_g_mean_flux.append(df_GAIA['phot_g_mean_flux'][idx])
        gaia_g_mean_flux_error.append(df_GAIA['phot_g_mean_flux_error'][idx])
        gaia_g_mean_mag.append(df_GAIA['phot_g_mean_mag'][idx])
        gaia_bp_mean_flux.append(df_GAIA['phot_bp_mean_flux'][idx])
        gaia_bp_mean_flux_error.append(df_GAIA['phot_bp_mean_flux_error'][idx])
        gaia_bp_mean_mag.append(df_GAIA['phot_bp_mean_mag'][idx])
        gaia_rp_mean_flux.append(df_GAIA['phot_rp_mean_flux'][idx])
        gaia_rp_mean_flux_error.append(df_GAIA['phot_rp_mean_flux_error'][idx])
        gaia_rp_mean_mag.append(df_GAIA['phot_rp_mean_mag'][idx])
        pickleidxgaia = np.where(np.array(picklelist_names) == 'GaiaDR2-'+"".join(list(df_GAIA['designation'][idx])[9:]))[0]
        if len(pickleidx > 0):
            gaia_nuv_time.append(picklelist[pickleidxgaia[0]][1])
            gaia_fuv_time.append(picklelist[pickleidxgaia[0]][2])
        else:
            gaia_nuv_time.append("")
            gaia_fuv_time.append("")
    else:
        #print("SDSS source " + stringcoord + " not found in GAIA catalog")
        gaia_designation.append("")
        gaia_ra.append("")
        gaia_dec.append("")
        gaia_parallax.append("")
        gaia_parallax_error.append("")
        gaia_g_mean_flux.append("")
        gaia_g_mean_flux_error.append("")
        gaia_g_mean_mag.append("")
        gaia_bp_mean_flux.append("")
        gaia_bp_mean_flux_error.append("")
        gaia_bp_mean_mag.append("")
        gaia_rp_mean_flux.append("")
        gaia_rp_mean_flux_error.append("")
        gaia_rp_mean_mag.append("")
        gaia_nuv_time.append("")
        gaia_fuv_time.append("")
        
    #SDSS information
    sdss_designation.append(df_SDSS['SDSS-J'][i])
    sdss_u.append(df_SDSS['u'][i])
    sdss_su.append(df_SDSS['su'][i])
    sdss_g.append(df_SDSS['g'][i])
    sdss_sg.append(df_SDSS['sg'][i])
    sdss_r.append(df_SDSS['r'][i])
    sdss_sr.append(df_SDSS['sr'][i])
    sdss_i.append(df_SDSS['i'][i])
    sdss_si.append(df_SDSS['si'][i])
    sdss_z.append(df_SDSS['z'][i])
    sdss_sz.append(df_SDSS['sz'][i])
    sdss_dtype.append(df_SDSS['dtype'][i])

    #Get expt info from pickle
    pickleidx = np.where( np.array(picklelist_names) == df_SDSS['SDSS-J'][i] )[0]
    if len(pickleidx > 0):
        sdss_nuv_time.append(picklelist[pickleidx[0]][1])
        sdss_fuv_time.append(picklelist[pickleidx[0]][2])
    else:
        sdss_nuv_time.append("")
        sdss_fuv_time.append("")

#Now loop through sources in the gaia catalog
for i in range(len(df_GAIA['designation'])):
    #Check if they already exist (i.e. also in sdss)
    if not df_GAIA['designation'][i] in gaia_designation:
        print(str(df_GAIA['designation'][i]) + " only in GAIA")
        gaia_designation.append(df_GAIA['designation'][i])
        gaia_ra.append(df_GAIA['ra'][i])
        gaia_dec.append(df_GAIA['dec'][i])
        gaia_parallax.append(df_GAIA['parallax'][i] * 10e3)
        gaia_parallax_error.append(df_GAIA['parallax_error'][i] * 10e3)
        gaia_g_mean_flux.append(df_GAIA['phot_g_mean_flux'][i])
        gaia_g_mean_flux_error.append(df_GAIA['phot_g_mean_flux_error'][i])
        gaia_g_mean_mag.append(df_GAIA['phot_g_mean_mag'][i])
        gaia_bp_mean_flux.append(df_GAIA['phot_bp_mean_flux'][i])
        gaia_bp_mean_flux_error.append(df_GAIA['phot_bp_mean_flux_error'][i])
        gaia_bp_mean_mag.append(df_GAIA['phot_bp_mean_mag'][i])
        gaia_rp_mean_flux.append(df_GAIA['phot_rp_mean_flux'][i])
        gaia_rp_mean_flux_error.append(df_GAIA['phot_rp_mean_flux_error'][i])
        gaia_rp_mean_mag.append(df_GAIA['phot_rp_mean_mag'][i])
        pickleidxgaia = np.where(np.array(picklelist_names) == 'GaiaDR2-'+"".join(list(df_GAIA['designation'][i])[9:]))[0]
        if len(pickleidxgaia > 0):
            gaia_nuv_time.append(picklelist[pickleidxgaia[0]][1])
            gaia_fuv_time.append(picklelist[pickleidxgaia[0]][2])
        else:
            gaia_nuv_time.append("")
            gaia_fuv_time.append("")

        sdss_designation.append("")
        sdss_u.append("")
        sdss_su.append("")
        sdss_g.append("")
        sdss_sg.append("")
        sdss_r.append("")
        sdss_sr.append("")
        sdss_i.append("")
        sdss_si.append("")
        sdss_z.append("")
        sdss_sz.append("")
        sdss_dtype.append("")
        sdss_nuv_time.append("")
        sdss_fuv_time.append("")


#Create output dictionary
output_dic = {
        "GaiaDesignation":gaia_designation,
        "SDSSDesignation":sdss_designation,
        "gaia_ra":gaia_ra,
        "gaia_dec":gaia_dec,
        "gaia_parallax":gaia_parallax,
        "gaia_parallax_error":gaia_parallax_error,
        "gaia_g_mean_flux":gaia_g_mean_flux,
        "gaia_g_mean_flux_error":gaia_g_mean_flux_error,
        "gaia_g_mean_mag":gaia_g_mean_mag,
        "gaia_bp_mean_flux":gaia_bp_mean_flux,
        "gaia_bp_mean_flux_error":gaia_bp_mean_flux_error,
        "gaia_bp_mean_mag":gaia_bp_mean_mag,
        "gaia_rp_mean_flux":gaia_rp_mean_flux,
        "gaia_rp_mean_flux_error":gaia_rp_mean_flux_error,
        "gaia_rp_mean_mag":gaia_rp_mean_mag,

        "sdss_u":sdss_u,
        "sdss_su":sdss_su,
        "sdss_g":sdss_g,
        "sdss_sg":sdss_sg,
        "sdss_r":sdss_r,
        "sdss_sr":sdss_sr,
        "sdss_i":sdss_i,
        "sdss_si":sdss_si,
        "sdss_z":sdss_z,
        "sdss_sz":sdss_sz,
        "sdss_dtype":sdss_dtype,

        "gaia_NUV_time":gaia_nuv_time,
        "gaia_FUV_time":gaia_fuv_time,
        "sdss_NUV_time":sdss_nuv_time,
        "sdss_FUV_time":sdss_fuv_time,
}

#Construct df
output_df = pd.DataFrame(output_dic)

#Drop rows with type other than WD
non_wd_idx = np.where( (output_df['sdss_dtype'].str[0] != 'D') & (output_df['sdss_dtype'].notnull()) )[0]
output_df = output_df.drop(index=non_wd_idx)
output_df = output_df.reset_index(drop=True)


#Drop rows where we have < 1000s NUV AND < 1000s FUV
rows_to_drop = []
for gnuv, gfuv, snuv, sfuv, i in zip(output_df['gaia_NUV_time'], output_df['gaia_FUV_time'], output_df['sdss_NUV_time'], output_df['sdss_FUV_time'], range(len(output_df['gaia_NUV_time']))):
    if (gnuv=="" and gfuv=="") and (snuv!="" and sfuv!=""):
        if (snuv < 1000) and (sfuv < 1000):
            rows_to_drop.append(i)
    elif (gnuv!="" and gfuv!="") and (snuv=="" and sfuv==""):
        if (gnuv < 1000) and (gfuv < 1000):
            rows_to_drop.append(i)
    else:
        if (gnuv < 1000) and (gfuv < 1000) and (snuv < 1000) and (sfuv < 1000):
            rows_to_drop.append(i)
'''
names_to_drop = []
for i in range(len(picklelist)):
    if picklelist[i][1] < 1000 and picklelist[i][2] < 1000:
        names_to_drop.append(picklelist[i][0])

rows_to_drop =[]
#If source has only SDSS designation & in names_to_drop , add index to rows_to_drop
sdss_only = np.where( (output_df['GaiaDesignation'] == '') & (output_df['SDSSDesignation'] != '') )[0]
print(len(sdss_only))
for idx in sdss_only:
    if output_df['SDSSDesignation'][idx] in names_to_drop:
        rows_to_drop.append(idx)

#If a source has only GAIA designation & in names_to_drop, add index to rows_to_drop

gaia_only = np.where( (output_df['GaiaDesignation'] != '') & (output_df['SDSSDesignation'] == '') )[0]
for idx in gaia_only:
    if 'GaiaDR2-'+"".join(list(output_df['GaiaDesignation'][idx])[9:]) in names_to_drop:    
        rows_to_drop.append(idx)

#CHECK TEST THING

pickle_gaia_names = []
pickle_gaia_expt = []
for idx in range(len(picklelist_names)):
    if picklelist_names[idx][0] =='G'
    pickle_gaia_names.append(picklelist_names[idx])
    pickle_gaia_expt.append(picklelist_expt[idx])

pickle_gaia_names_2 = [ name[0:4]+" " + name[4:7]+" "+name[8:] ofr name in pickle_gaia_names ] 

for gaianame in gaiacatalog['designation']:
    i = np.where(np.array(pickle_gaia_names_2) == gaianame)[0]
    if len(i) != 0:
        idx = i[0]
        if (pickle_gaia_expt[idx][0] < 1000) and (pickle_gaia_expt[idx][1] < 1000):
        print(gaianame, pickle_gaia_names_2[idx], pickle_gaia_expt[idx])



#If a source has both and both designations are in names_to_drop, add index to rows_to_drop
gaia_and_sdss = np.where( (output_df['GaiaDesignation'] != '') & (output_df['SDSSDesignation'] != '') )[0]
for idx in gaia_and_sdss:
    if ('GaiaDR2-'+"".join(list(output_df['GaiaDesignation'][idx])[9:]) in names_to_drop) and (output_df['SDSSDesignation'][idx] in names_to_drop):
        rows_to_drop.append(idx)
'''

print("Dropping " + str(len(rows_to_drop)) + " rows due to exposure time limitation")
output_df = output_df.drop(index=rows_to_drop)



#Save to CSV
output_df.to_csv("BigCatalog_new.csv", index=False)
